import { telegramManager } from "../utils/handlers/telegramHandler";

async function testTelegramNotifications() {
  console.log("ü§ñ === Testing Enhanced Telegram Notifications with Whitelist ===\n");

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    console.log("1. üîç Checking system status...");
    const status = await telegramManager.getStatus();
    console.log(`   ‚úÖ System Status:`);
    console.log(`      Enabled: ${status.enabled ? "‚úÖ YES" : "‚ùå NO"}`);
    console.log(`      Bot Token: ${status.botToken ? "‚úÖ SET" : "‚ùå MISSING"}`);
    console.log(`      Whitelist Count: ${status.whitelistCount} users`);
    
    if (status.botInfo) {
      console.log(`      Bot Info:`);
      console.log(`         Name: @${status.botInfo.username}`);
      console.log(`         ID: ${status.botInfo.id}`);
      console.log(`         First Name: ${status.botInfo.first_name}`);
    }
    
    if (status.error) {
      console.log(`      ‚ö†Ô∏è  Error: ${status.error}`);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ whitelist'–∞
    console.log("\n2. üîí Checking whitelist...");
    const whitelist = telegramManager.getWhitelist();
    console.log(`   Authorized users: ${whitelist.length}`);
    whitelist.forEach((chatId, index) => {
      console.log(`      ${index + 1}. ${chatId}`);
    });

    if (whitelist.length === 0) {
      console.log("   ‚ö†Ô∏è  WARNING: Whitelist is empty! No users will receive notifications.");
      console.log("   üí° Add chat IDs to TELEGRAM_CHAT_ID_1, TELEGRAM_CHAT_ID_2 in .env file");
      return;
    }

    // 3. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log("\n3. üì° Testing connection...");
    const connected = await telegramManager.testConnection();
    console.log(`   Connection test: ${connected ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    if (!connected) {
      console.log("   üí° Troubleshooting:");
      console.log("      1. Check bot token is correct");
      console.log("      2. Check chat IDs are valid");
      console.log("      3. Start conversation with bot first (send /start)");
      return;
    }

    // 4. –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ
    console.log("4. üí∞ Testing token bought notification...");
    const tokenBought = await telegramManager.notifyTokenBought({
      amount: 0.1,
      token: "So11111111111111111111111111111111111111112",
      price: 0.00001234,
      links: "üîó [GMGN](https://gmgn.ai) | üìä [BullX](https://bullx.io)",
      percentage: 5.2,
    });
    console.log(`   Token bought test: ${tokenBought ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));

    // 5. –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ
    console.log("5. üí∏ Testing token sold notification...");
    const tokenSold = await telegramManager.notifyTokenSold({
      reason: "Take Profit Level 1",
      pnl: 150.5,
      pnl_sol: 0.15,
      token: "So11111111111111111111111111111111111111112",
      price: 0.00003456,
    });
    console.log(`   Token sold test: ${tokenSold ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    await new Promise(resolve => setTimeout(resolve, 1000));

    // 6. –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑—É–±—ã—Ç–∫–µ
    console.log("6. ‚ö° Testing breakeven notification...");
    const breakeven = await telegramManager.notifyBreakevenMoved({
      token: "So11111111111111111111111111111111111111112",
      profit: 35.2,
      new_sl: 5.0,
    });
    console.log(`   Breakeven test: ${breakeven ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    await new Promise(resolve => setTimeout(resolve, 1000));

    // 7. –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–π–ª–∏–Ω–≥–µ
    console.log("7. üöÄ Testing trailing stop notification...");
    const trailing = await telegramManager.notifyTrailingActivated({
      token: "So11111111111111111111111111111111111111112",
      profit: 75.3,
      distance: 15.0,
    });
    console.log(`   Trailing test: ${trailing ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    await new Promise(resolve => setTimeout(resolve, 1000));

    // 8. –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    console.log("8. ‚ùå Testing error notification...");
    const error = await telegramManager.notifyError("Test error message for system validation");
    console.log(`   Error test: ${error ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    await new Promise(resolve => setTimeout(resolve, 1000));

    // 9. –¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
    console.log("9. ‚ö†Ô∏è Testing balance warning...");
    const balanceWarning = await telegramManager.notifyBalanceWarning({
      balance: 0.05,
      reason: "Balance critically low",
      tradingBalance: 0.03,
      nextBuyAmount: 0.001,
    });
    console.log(`   Balance warning test: ${balanceWarning ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    await new Promise(resolve => setTimeout(resolve, 1000));

    // 10. –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –±–∞–ª–∞–Ω—Å–∞
    console.log("10. üìä Testing balance status...");
    const balanceStatus = await telegramManager.notifyBalanceStatus({
      balance: 2.5,
      tradingBalance: 2.35,
      nextBuyAmount: 0.12,
      estimatedTrades: 19,
      buyMode: "percentage",
      percentage: 5,
    });
    console.log(`   Balance status test: ${balanceStatus ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    await new Promise(resolve => setTimeout(resolve, 1000));

    // 11. –¢–µ—Å—Ç –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
    console.log("11. üìà Testing daily summary...");
    const dailySummary = await telegramManager.notifyDailySummary({
      trades_count: 8,
      total_pnl: 45.2,
      total_pnl_sol: 0.87,
      win_rate: 62.5,
      starting_balance: 2.1,
      ending_balance: 2.97,
    });
    console.log(`   Daily summary test: ${dailySummary ? "‚úÖ SUCCESS" : "‚ùå FAILED"}\n`);

    console.log("‚úÖ === All Telegram Tests Completed ===");

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    console.log("\nüìä FINAL SUMMARY:");
    console.log("=".repeat(50));
    console.log(`ü§ñ Bot Status: ${status.enabled ? "OPERATIONAL" : "DISABLED"}`);
    console.log(`üë• Authorized Users: ${whitelist.length}`);
    console.log(`üì± All notifications tested successfully!`);
    
    if (status.botInfo) {
      console.log(`\nüîß Bot Details:`);
      console.log(`   Name: @${status.botInfo.username}`);
      console.log(`   ID: ${status.botInfo.id}`);
    }
    
    console.log(`\nüí° Setup Instructions:`);
    console.log(`   1. Your bot token is configured ‚úÖ`);
    console.log(`   2. Whitelist contains ${whitelist.length} users ‚úÖ`);
    console.log(`   3. All notification types working ‚úÖ`);
    console.log(`   4. Ready for production! üöÄ`);

  } catch (error) {
    console.error("‚ùå Telegram test failed:", error);
    console.error("\nüîß Troubleshooting Guide:");
    console.error("=" .repeat(50));
    console.error("1. CHECK BOT TOKEN:");
    console.error("   - Go to @BotFather on Telegram");
    console.error("   - Create new bot with /newbot");
    console.error("   - Copy token to TELEGRAM_BOT_TOKEN in .env");
    console.error("");
    console.error("2. GET YOUR CHAT ID:");
    console.error("   - Send message to @userinfobot");
    console.error("   - Copy your chat ID");
    console.error("   - Add to TELEGRAM_CHAT_ID_1 in .env");
    console.error("");
    console.error("3. START CONVERSATION:");
    console.error("   - Find your bot by username");
    console.error("   - Send /start to your bot");
    console.error("   - Bot can only message users who started conversation first");
    console.error("");
    console.error("4. VERIFY .env FILE:");
    console.error("   TELEGRAM_BOT_TOKEN=your_bot_token_here");
    console.error("   TELEGRAM_CHAT_ID_1=your_chat_id_here");
    console.error("   TELEGRAM_CHAT_ID_2=friend_chat_id_here");
    console.error("");
    console.error("5. COMMON ISSUES:");
    console.error("   - 'Forbidden: bot was blocked by the user'");
    console.error("     ‚Üí User needs to unblock bot and send /start");
    console.error("   - 'Bad Request: chat not found'");
    console.error("     ‚Üí Check chat ID is correct");
    console.error("   - 'Unauthorized'");
    console.error("     ‚Üí Check bot token is correct");
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testWhitelistSecurity() {
  console.log("\nüîí === Testing Whitelist Security ===");
  
  // –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const testChatIds = ["123456789", "987654321", "555666777"];
  
  testChatIds.forEach(chatId => {
    const isAuthorized = telegramManager.isUserAuthorized(chatId);
    console.log(`   User ${chatId}: ${isAuthorized ? "‚úÖ AUTHORIZED" : "‚ùå NOT AUTHORIZED"}`);
  });
  
  console.log(`\nüìä Total authorized users: ${telegramManager.getWhitelist().length}`);
}

async function testMessageFormatting() {
  console.log("\nüé® === Testing Message Formatting ===");
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testCases = [
    {
      name: "Token with very small price",
      data: {
        amount: 0.001,
        token: "AbCdEfGhIjKlMnOpQrStUvWxYz123456789AbCdEf",
        price: 0.000000001,
        links: "Test links",
        percentage: 0.1,
      }
    },
    {
      name: "Token with large numbers",
      data: {
        amount: 50.0,
        token: "So11111111111111111111111111111111111111112",
        price: 123.456789,
        links: "üîó [GMGN](https://gmgn.ai) | üìä [BullX](https://bullx.io) | üîç [Solscan](https://solscan.io)",
        percentage: 99.9,
      }
    }
  ];
  
  for (const testCase of testCases) {
    console.log(`\n   Testing: ${testCase.name}`);
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –º—ã –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`      Amount: ${testCase.data.amount}`);
    console.log(`      Price: ${testCase.data.price}`);
    console.log(`      Percentage: ${testCase.data.percentage}%`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { 
  testTelegramNotifications, 
  testWhitelistSecurity, 
  testMessageFormatting 
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--security')) {
    testWhitelistSecurity().catch(console.error);
  } else if (args.includes('--formatting')) {
    testMessageFormatting().catch(console.error);
  } else if (args.includes('--all')) {
    Promise.all([
      testTelegramNotifications(),
      testWhitelistSecurity(), 
      testMessageFormatting()
    ]).catch(console.error);
  } else {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    testTelegramNotifications().catch(console.error);
  }
}